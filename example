
document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const sortMarketCapBtn = document.getElementById('sortMarketCap');
    const sortPriceBtn = document.getElementById('sortPrice');
    const tableBody = document.getElementById('tableBody');

    let originalData = [];

    async function fetchData() {
        try {
            const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false');
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching data:', error);
            throw error;
        }
    }

    function renderData(data) {
        tableBody.innerHTML = '';

        data.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.name}</td>
                <td>${item.id}</td>
                <td><img src="${item.image}" alt="${item.name}" width="50"></td>
                <td>${item.symbol}</td>
                <td>${item.current_price}</td>
                <td>${item.total_volume}</td>
            `;
            tableBody.appendChild(row);
        });
    }

    async function init() {
        const data = await fetchData();
        originalData = data; // Store original data for filtering
        renderData(data);
    }

    init();

    function search() {
        const searchText = searchInput.value.trim().toUpperCase();

        if (searchText === '') {
            renderData(originalData); // If search input is empty, render original data
            return;
        }

        const filteredData = originalData.filter(item => {
            return item.name.toUpperCase().includes(searchText) || item.symbol.toUpperCase().includes(searchText);
        });

        renderData(filteredData);
    }

    function sortTableByMarketCap() {
        const rows = Array.from(tableBody.getElementsByTagName('tr'));
        const sortedRows = rows.sort((a, b) => {
            const aValue = parseFloat(a.children[4].textContent);
            const bValue = parseFloat(b.children[4].textContent);
            return bValue - aValue;
        });
        tableBody.innerHTML = '';
        sortedRows.forEach(row => tableBody.appendChild(row));
    }

    function sortTableByPrice() {
        const rows = Array.from(tableBody.getElementsByTagName('tr'));
        const sortedRows = rows.sort((a, b) => {
            const aValue = parseFloat(a.children[5].textContent);
            const bValue = parseFloat(b.children[5].textContent);
            return bValue - aValue;
        });
        tableBody.innerHTML = '';
        sortedRows.forEach(row => tableBody.appendChild(row));
    }

    searchButton.addEventListener('click', search);
    sortMarketCapBtn.addEventListener('click', sortTableByMarketCap);
    sortPriceBtn.addEventListener('click', sortTableByPrice);
});
